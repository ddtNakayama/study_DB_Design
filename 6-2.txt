
■Oracle Database

	インデックス名を指定して対象のインデックスを再構築する。
	ALTER INDEX {インデックス名} REBUILD;

■SQL Server

	手段として「再構築」と「再構成」がある
	
	・再構築
		
		インデックス名を指定して対象のインデックスを再構築する。
		ALTER INDEX {インデックス名} REBUILD
		
		テーブル名を指定して対象のテーブルのすべてのインデックスを再構築する。
		ALTER INDEX ALL ON {テーブル名} REBUILD
		
	・再構成
	
		インデックス名を指定して対象のインデックスを再構成する。
		ALTER INDEX {インデックス名} REORGANIZE
	
	
	★「再構築」と「再構成」
	
		再構築：
			処理対象：インデックス全体。
			同時実行性：処理中はインデックス全体がロックされる。ただし、オンラインでの実行では可能。
			途中でキャンセル：処理はすべて無効。
			ログの量：断片化の度合いに影響を受けない。
			使用するデータ領域：再構成より多い。
			実施時間：断片化の度合いに影響を受けない。
			
		再構成：
			処理対象：インデックスのリーフレベル（末端）のみ。
			同時実行性：処理中も使用可能。処理しているページに対してのみロックされる。
			途中でキャンセル：キャンセルした時点まで有効。
			ログの量：断片化の度合いが大きいと多くなる。
			使用するデータ領域：再構成より少ない。
			実施時間：断片化の度合いが大きいと長くなる。

■DB2

	インデックス名を指定して対象のインデックスを再構築する。
	DB2 REORG INDEXES ALL FOR TABLE {テーブル名}

	テーブル名を指定して対象のテーブルのすべてのインデックスを再構築する。
	DB2 REORG TABLE {テーブル名} INDEX {インデックス名}

■PostgreSQL

	インデックス名を指定した対象のインデックスを再構築する
	REINDEX INDEX {インデックス名}
	
	テーブル名を指定して対象のテーブルのすべてのインデックスを再構築する。
	REINDEX TABLE {テーブル名}
	
	データベース名を指定して対象のデータベースのすべてのインデックスを再構築する。
	REINDEX DATABASE {データベース名}
	
	現在のデータベースの対象のシステムカタログのすべてのインデックスを再構築する。ユーザのテーブルのインデックは処理しない。
	REINDEX SYSTEM {データベース名}
	
■MySql

	※ダンプを取得して、リロードすることでインデックスの再構築を行う。
	
	テーブルの再構築を行う
	mysqldump {データベース名} {テーブル名} > {ダンプファイル名}
	mysql {データベース名} < {ダンプファイル名}
	
	データベースの再構築を行う
	mysqldump {データベース名} > {ダンプファイル名}
	mysql {データベース名} < {ダンプファイル名}
	
	すべてのデータベースの再構築を行う
	mysqldump --all-databases > {ダンプファイル名}
	mysql {データベース名} < {ダンプファイル名}
